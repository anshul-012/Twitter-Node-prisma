generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String?
  username     String        @unique
  email        String        @unique
  password     String?       @db.VarChar(255)
  tagList      String?       @db.VarChar(70)
  bio          String?       @db.VarChar(150)
  private      Boolean       @default(false)
  blueTick     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  avatar       Json?
  paymentId    Int?          @unique
  comments     Comment[]
  followers    Friend[]      @relation("UserFollowers")
  friends      Friend[]      @relation("UserFriends")
  likespost    Like[]
  payment      Payments?
  posts        Post[]
  SavedPost    SavedPost[]
  Verification Verification?
}

model Post {
  id        Int         @id @default(autoincrement())
  content   String      @db.VarChar(250)
  published Boolean     @default(false)
  ownerId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  image     Json?
  Comments  Comment[]
  likes     Like[]
  owner     User        @relation(fields: [ownerId], references: [id])
  savedby   SavedPost[]
}

model Like {
  id     Int    @id @default(autoincrement())
  postId Int
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String @db.VarChar(100)
  postId  Int
  userId  String
  post    Post   @relation(fields: [postId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model SavedPost {
  userId String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

model Friend {
  id         Int    @id @default(autoincrement())
  userId     String
  followerId String
  follower   User   @relation("UserFollowers", fields: [followerId], references: [id])
  user       User   @relation("UserFriends", fields: [userId], references: [id])
}

model Payments {
  id            Int      @id
  userId        String   @unique
  payment       Boolean
  paymentExpire DateTime
  user          User     @relation(fields: [userId], references: [id])
}

model Verification {
  id         Int      @id @default(autoincrement())
  userId     String   @unique
  expireTime DateTime
  verify     Boolean  @default(false)
  otp        Int
  user       User     @relation(fields: [userId], references: [id])
}
